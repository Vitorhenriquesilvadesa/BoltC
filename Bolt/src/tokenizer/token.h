#ifndef TOKEN_H
#define TOKEN_H

#include <stdint.h>
#include <stdbool.h>

typedef enum
{
    SCANNER_STATUS_ERROR_INVALID_CHARACTER,
    SCANNER_STATUS_OK,
} ScannerStatus;

typedef enum
{
    TOKEN_TYPE_EOF,
    TOKEN_TYPE_PLUS,
    TOKEN_TYPE_PLUS_PLUS,
    TOKEN_TYPE_MINUS,
    TOKEN_TYPE_MINUS_MINUS,
    TOKEN_TYPE_STAR,
    TOKEN_TYPE_SLASH,
    TOKEN_TYPE_NONE,
    TOKEN_TYPE_GREATER,
    TOKEN_TYPE_GREATER_EQUAL,
    TOKEN_TYPE_LESS,
    TOKEN_TYPE_LESS_EQUAL,
    TOKEN_TYPE_EQUAL,
    TOKEN_TYPE_EQUAL_EQUAL,
    TOKEN_TYPE_NOT_EQUAL,
    TOKEN_TYPE_MODULUS,
    TOKEN_TYPE_LOGICAL_AND,
    TOKEN_TYPE_LOGICAL_OR,
    TOKEN_TYPE_LOGICAL_NOT,
    TOKEN_TYPE_BITWISE_AND,
    TOKEN_TYPE_BITWISE_OR,
    TOKEN_TYPE_BITWISE_XOR,
    TOKEN_TYPE_BITWISE_NOT,
    TOKEN_TYPE_LEFT_SHIFT,
    TOKEN_TYPE_RIGHT_SHIFT,
    TOKEN_TYPE_ADD_AND_ASSIGN,
    TOKEN_TYPE_SUBTRACT_AND_ASSIGN,
    TOKEN_TYPE_MULTIPLY_AND_ASSIGN,
    TOKEN_TYPE_DIVIDE_AND_ASSIGN,
    TOKEN_TYPE_MODULUS_AND_ASSIGN,
    TOKEN_TYPE_QUESTION,
    TOKEN_TYPE_COLON,
    TOKEN_TYPE_LEFT_BRACKET,
    TOKEN_TYPE_RIGHT_BRACKET,
    TOKEN_TYPE_LEFT_PAREN,
    TOKEN_TYPE_RIGHT_PAREN,
    TOKEN_TYPE_LEFT_BRACE,
    TOKEN_TYPE_RIGHT_BRACE,
    TOKEN_TYPE_COMMA,
    TOKEN_TYPE_SEMICOLON,
    TOKEN_TYPE_PREPROCESSOR,
    TOKEN_TYPE_DOT,
    TOKEN_TYPE_AUTO,
    TOKEN_TYPE_BREAK,
    TOKEN_TYPE_CASE,
    TOKEN_TYPE_CHAR,
    TOKEN_TYPE_CONST,
    TOKEN_TYPE_CONTINUE,
    TOKEN_TYPE_DEFAULT,
    TOKEN_TYPE_DO,
    TOKEN_TYPE_DOUBLE,
    TOKEN_TYPE_ELSE,
    TOKEN_TYPE_ENUM,
    TOKEN_TYPE_EXTERN,
    TOKEN_TYPE_FLOAT,
    TOKEN_TYPE_FOR,
    TOKEN_TYPE_GOTO,
    TOKEN_TYPE_IF,
    TOKEN_TYPE_INT,
    TOKEN_TYPE_LONG,
    TOKEN_TYPE_REGISTER,
    TOKEN_TYPE_RETURN,
    TOKEN_TYPE_SHORT,
    TOKEN_TYPE_SIGNED,
    TOKEN_TYPE_SIZEOF,
    TOKEN_TYPE_STATIC,
    TOKEN_TYPE_STRUCT,
    TOKEN_TYPE_SWITCH,
    TOKEN_TYPE_TYPEDEF,
    TOKEN_TYPE_UNION,
    TOKEN_TYPE_UNSIGNED,
    TOKEN_TYPE_VOID,
    TOKEN_TYPE_VOLATILE,
    TOKEN_TYPE_WHILE,
    TOKEN_TYPE_STRING_LITERAL,
    TOKEN_TYPE_IDENTIFIER,
    TOKEN_TYPE_INLINE,
} TokenType;

typedef enum
{
    TOKEN_ATTRIBUTE_TYPE_NULL_ATTRIBUTE,
    TOKEN_ATTRIBUTE_TYPE_INT_LITERAL,
    TOKEN_ATTRIBUTE_TYPE_FLOAT_LITERAL,
    TOKEN_ATTRIBUTE_TYPE_STRING_LITERAL,
} TokenAttributeType;

typedef struct
{
    TokenAttributeType type;
    union
    {
        bool boolean;
        int integer;
        float floating;
        char *string;
    } value;
} TokenAttribute;

typedef struct
{
    TokenType type;
    uint32_t line;
    char *lexeme;
    TokenAttribute attribute;
} Token;

#endif